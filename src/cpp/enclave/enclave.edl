// -*- mode: c++ -*-
/* enclave.edl - Top EDL file. */

enclave {

  from "openenclave/edl/syscall.edl" import *;
  from "platform.edl" import *;

  include "stdbool.h"

  trusted {

    public void ecall_set_debugging_level();

    public void ecall_project(
      [in, count=project_list_length] uint8_t *project_list, size_t project_list_length,
      [user_check] uint8_t *input_rows, size_t input_rows_length,
      [out] uint8_t **output_rows, [out] size_t *output_rows_length);

    public void ecall_filter(
      [in, count=condition_length] uint8_t *condition, size_t condition_length,
      [user_check] uint8_t *input_rows, size_t input_rows_length,
      [out] uint8_t **output_rows, [out] size_t *output_rows_length);

    public void ecall_encrypt(
      [user_check] uint8_t *plaintext, uint32_t length,
      [user_check] uint8_t *ciphertext, uint32_t cipher_length);

    public void ecall_sample(
      [user_check] uint8_t *input_rows, size_t input_rows_length,
      [out] uint8_t **output_rows, [out] size_t *output_rows_length);

    public void ecall_find_range_bounds(
      [in, count=sort_order_length] uint8_t *sort_order, size_t sort_order_length,
      uint32_t num_partitions,
      [user_check] uint8_t *input_rows, size_t input_rows_length,
      [out] uint8_t **output_rows, [out] size_t *output_rows_length);

    public void ecall_partition_for_sort(
      [in, count=sort_order_length] uint8_t *sort_order, size_t sort_order_length,
      uint32_t num_partitions,
      [user_check] uint8_t *input_rows, size_t input_rows_length,
      [user_check] uint8_t *boundary_rows, size_t boundary_rows_length,
      [out, count=num_partitions] uint8_t **output_partitions,
      [out, count=num_partitions] size_t *output_partition_lengths);

    public void ecall_external_sort(
      [in, count=sort_order_length] uint8_t *sort_order, size_t sort_order_length,
      [user_check] uint8_t *input_rows, size_t input_rows_length,
      [out] uint8_t **output_rows, [out] size_t *output_rows_length);

    public void ecall_non_oblivious_sort_merge_join(
      [in, count=join_expr_length] uint8_t *join_expr, size_t join_expr_length,
      [user_check] uint8_t *input_rows, size_t input_rows_length,
      [out] uint8_t **output_rows, [out] size_t *output_rows_length);

    public void ecall_broadcast_nested_loop_join(
      [in, count=join_expr_length] uint8_t *join_expr, size_t join_expr_length,
      [user_check] uint8_t *outer_rows, size_t outer_rows_length,
      [user_check] uint8_t *inner_rows, size_t inner_rows_length,
      [out] uint8_t **output_rows, [out] size_t *output_rows_length);

    public void ecall_non_oblivious_aggregate(
      [in, count=agg_op_length] uint8_t *agg_op, size_t agg_op_length,
      [user_check] uint8_t *input_rows, size_t input_rows_length,
      [out] uint8_t **output_rows, [out] size_t *output_rows_length,
      bool is_partial);

    public void ecall_count_rows_per_partition(
      [user_check] uint8_t *input_rows, size_t input_rows_length,
      [out] uint8_t **output_rows, [out] size_t *output_rows_length);

    public void ecall_compute_num_rows_per_partition(
      uint32_t limit,
      [user_check] uint8_t *input_rows, size_t input_rows_length,
      [out] uint8_t **output_rows, [out] size_t *output_rows_length);

    public void ecall_local_limit(
      uint32_t limit,
      [user_check] uint8_t *input_rows, size_t input_rows_length,
      [out] uint8_t **output_rows, [out] size_t *output_rows_length);

    public void ecall_limit_return_rows(
      uint64_t partition_id,
      [user_check] uint8_t *limit_rows, size_t limit_rows_length,
      [user_check] uint8_t *input_rows, size_t input_rows_length,
      [out] uint8_t **output_rows, [out] size_t *output_rows_length);

    public void ecall_generate_evidence(
      [out] uint8_t** evidence_msg_data,
      [out] size_t* evidence_msg_data_size);

    public void ecall_finish_attestation(
      [in,size=enc_signed_shared_key_size] uint8_t *enc_signed_shared_key,
      uint32_t enc_signed_shared_key_size);
  };

  untrusted {
    void ocall_print_string([in, string] const char *str);

    /**
     * Allocate memory outside of the enclave and return the pointer in `ret`.
     *
     * Before dereferencing the resulting pointer, the caller must check whether it is actually
     * outside the enclave using `oe_is_outside_enclave()`. Otherwise, an attacker could cause the
     * enclave to perform unexpected operations on its own memory. The function `ocall_malloc()`
     * wraps this function with such a bounds check and most callers should use that function
     * instead.
     */
    void unsafe_ocall_malloc(size_t size, [out] uint8_t **ret);

    void ocall_free([user_check] uint8_t *buf);
    void ocall_exit(int exit_code);
    void ocall_throw([in, string] const char *message);
  };

};
